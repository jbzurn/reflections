What happens when you initialize a repository? Why do you need to do it?
	When you initialize a repository, git creates a hidden folder for
	tracking purposes. You need to initialize git in a directory in order
	to start using git for a project. Initially the repository will be
	empty.

How is the staging area different from the working directory and the repository? What value do you think it offers?
	The staging area allows you to prepare multiple files to be committed in one commit. It also gives you control over which files are committed.  This is different from the working directory, which simply is
	a repository for all the current files.

How can you use the staging area to make sure you have one commit per logical change?
	By comparing the staging area with the last commit, and observing the differences.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	Branches are useful when you want to test a new feature or fix and still be able to demonstrate/work on/revert to the original program, or when you want to incorporate a new feature that is separate from the track of the original program. That way you can organize the work towards each goal into separate branches, and merge/drop them later when you are ready.

How do the diagrams help you visualize the branch structure?
	The diagrams help clarify where the branches are connected, and which commits belong to each branch. It also makes it easier to see which commits are not reachable from specific branches.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	The result of merging the branches is that the changes made separately are combined into one file automatically. We represent it in the diagram as two separate paths that join at the head. That way we can see the parents for each commit, and we don't lose the information from the prior commit tree.

